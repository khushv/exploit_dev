; convert hex to ascii


global _start

section .text

_start:

Translate: 
	xor eax, eax
	xor ebx, ebx
	MOV   CX, 0x04          ; Set loop counter to bytes in buffer
	push 0x00
	push 0x0a
	MOV EDX, 0x12345678
Begin:     
        MOV AL, DL
	MOV   AH, AL          ; Duplicate
        SHR   AL, 0x04        ; High nibble to low sibble
        AND   AX, 0x0F0F      ; Mask out high nibbles
                                 ; High nibble is now in low 4 of AL
                                 ; Low  niblle is in low 4 of AH
           OR    AX, 0x3030      ; Shift code bank
           CMP   AL, 0x39        ; If high nibble > '9'
           JBE   Skip1
           ADD   AL, 0x07        ; adjust to alphabetic
Skip1:     
	CMP   AH, 0x39        ; If low  nibble > '9'
           JBE   Skip2           ;
           ADD   AH, 0x07        ; adjust to alphabetic
Skip2:     
	push ax
	SHR EDX, 0x08
	LOOP  Begin           ; Repeat while bytes remain.
	pop edi			; final bits to print to screen
	mov eax, 0x04
	mov ebx, 0x01
	mov ecx, edi
	mov edx, 0x0b
	int 0x80
	ret

